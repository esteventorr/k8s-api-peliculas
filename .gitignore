# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include the Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenvâ€™s locking mechanism may not lock or install dependencies
#   correctly. Therefore, it might be a good idea to include the lock file in version control if you want
#   to ensure that collaborators can generate identical environments.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
# All JetBrains IDEs (IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm)
# are configured by default to store project settings in the `.idea` directory.
# To share some of the IDE settings with all the developers working on the project,
# JetBrains has introduced the concept of the Project and IDE profiles.
# You can read more about sharing the IDE settings at:
# https://www.jetbrains.com/help/idea/sharing-your-ide-settings.html
#
# For instance, to share the code style settings across all the developers on the project,
# you can store `codeStyleConfig.xml` under version control.
# You can choose to share the entire `.idea` directory or only the parts of it.
# Here is the default JetBrains `.gitignore` content:
#
.idea/
# If you wish to track parts of the .idea folder (like code styles) comment the above and uncomment these:
# .idea/codeStyles/
# .idea/inspectionProfiles/
# .idea/runConfigurations/
# .idea/dictionaries
# .idea/vcs.xml
# .idea/jsLibraryMappings.xml

# User-specific stuff:
# .idea/workspace.xml
# .idea/tasks.xml
# .idea/dictionaries
# .idea/shelf

# AWS config
.aws/

# Virtualenv
#  Normally it's better to exclude the entire virtualenv directory, since there's no benefit to tracking it.
#  But if you want to track certain files from the virtualenv, comment out the line below and include the
#  files individually:
# venv/

# SASS/SCSS cache
.sass-cache

# dotenv environment variables file
.env
.env.test

# dotenv environment variables file
.env

# node.js
node_modules/
npm-debug.log
yarn-error.log

# Operating System Files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Docker
# Depending on your Docker configuration, you may wish to ignore some files generated by Docker. Here are some common ones:
# docker-compose*.yml
# docker-compose*.yaml
# Dockerfile
# *.dockerignore
# *.env.docker
# .env.docker.*
